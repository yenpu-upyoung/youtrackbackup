/**
 * Copyright JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// https://www.redmine.org/projects/redmine/wiki/Rest_api

const connection = require('./connection');
const utils = require('./utils');

//TODO Wiki to markdown


const RedmineIssues = function (context) {

  const client = {};

  const connect = connection.makeHttpConnection(context);
  const loadJSON = connection.loadJsonFactory(connect);

  let currentOffset = 0;
  let currentProject = 0;
  let articlesCounter = 1;
  let articles = [];

  //used for users' additional data fetching
  const pageSize = 100;

  let myAccount = {};
  let usersData = {};
  let workItemsData = {};
  let customFields = [];
  const groups = {};
  const articlesMap = {};
  //used for history reasons, currently unnecessary
  let projects = [];
  let statusesMap = {};
  let groupsMap = {};

  const projectsWithWiki = [];

  //used for group assignee scenarios
  let assignedToGroup = false;

  const miscQuery = {
    'include': 'attachments,relations,journals,watchers,children'
  };

  const getTimestampFormats = () => {
    return ['yyyy-MM-dd\'T\'HH:mm:ss\'Z\'', 'yyyy-MM-dd'];
  };


  const myAccountGetter = () => {
    const account = loadJSON('/users/current.json').user || {};
    return {
      id: account.login,
      login: account.login,
      name: account.firstname,
      fullName: account.firstname + ' ' + account.lastname,
      email: account.mail
    };
  };

  //used only for getUsersData() if needed
  const looper = (obj, prev, status, query) => {
    let currentUsers = prev;
    if (obj.total_count > pageSize) {
      let count = currentUsers.length;
      let currentOffset = 0;
      query.status = status;
      do {
        currentOffset += pageSize;
        query.offset = currentOffset + '';
        const tempUsers = loadJSON('/users.json?', query).users || [];
        currentUsers = currentUsers.concat(tempUsers);
        count += tempUsers.length;
      } while (count < obj.total_count);
    }
    //nullify offset for future executions
    query.offset = '0';
    return currentUsers;
  };

  const getUsersData = () => {
    const result = {};

    const query = {
      'status': '3',
      'limit': pageSize + ''
    };
    //checking banned users
    const banned = loadJSON('/users.json?', query);

    let bannedUsers = banned.users || [];

    bannedUsers = looper(banned, bannedUsers, '3', query);
    bannedUsers && bannedUsers.forEach(user => {
      user['banned'] = true;
      result[user.id] = user;
    });
    //?status= parameter is needed for fetching of non-active users(including banned)
    query.status = '';
    const data = loadJSON('/users.json?', query);
    let dataUsers = data.users || [];
    dataUsers = looper(data, dataUsers, '', query);
    dataUsers.forEach(user => {
      if (!result.hasOwnProperty(user.id)) {
        result[user.id] = user;
      }

    });
    return result;
  };

  const getWorkItems = () => {
    let result = {};
    const query = {'limit': pageSize + ''};

    const fillWorkItems = (data) => {
      data.filter(workItem => workItem.hours).forEach(workItem => {
        if (workItem.hasOwnProperty('issue')) {
          if (!result.hasOwnProperty(workItem.issue.id)) {
            result[workItem.issue.id] = [];
          }
          result[workItem.issue.id].push(workItem);
        }
      });
    };


    const response = loadJSON('/time_entries.json', query) || {};
    const data = response.time_entries || [];

    fillWorkItems(data);
    if (response.total_count > pageSize) {
      let count = data.length;
      let currentOffset = 0;
      let tempData;
      do {
        currentOffset += pageSize;
        query.offset = currentOffset + '';
        tempData = loadJSON('/time_entries.json', query).time_entries || [];
        fillWorkItems(tempData);
        count += tempData.length;
      } while (count < response.total_count && tempData.length);
    }
    //needed to sort array of object per id, otherwise the elder one will be only used
    Object.keys(result).forEach(el => {
      result[el].sort((a, b) => a.id - b.id);
    });
    return result;
  };

  const getGroups = () => loadJSON('/groups.json').groups.forEach(group => groups[group.name] = group);

  const prepareToImport = () => {
    console.log('Preparing to leave Redmine... ( ͡❛ ͜ʖ ͡❛)');
    console.log('Fetching usersData...');
    usersData = getUsersData();
    console.log('Getting workItems...');
    workItemsData = getWorkItems();
    console.log('Getting current account...');
    myAccount = myAccountGetter();
    console.log('Getting groups...');
    getGroups();
  };

  const headersToMap = (headers) => {
    const result = {};
    for (let header in headers) {
      if (!headers.hasOwnProperty(header)) {
        continue;
      }
      result[headers[header].name.toLowerCase()] = headers[header].value;
    }
    return result;
  };

  const getServerInfo = () => {
    const response = connect.getSync('/');
    const headers = headersToMap(response.headers);
    const server = headers['server'] ?? '1.0.0';
    const date = headers['date'] ?? Date.now();
    return {
      version: server,
      time: new Date(date).toISOString()
    };
  };

  const getCustomFields = () => {

    const checkCfType = (field) => {
      //filtering unnecessary custom field types
      const cfArray = ['issue', 'project', 'version', 'issue_priority'];
      return cfArray.indexOf(field.customized_type) > -1;
    };

    const customFields = loadJSON('/custom_fields.json').custom_fields;
    return customFields.filter(checkCfType).map(cf => {
      return {
        id: cf.id + '',
        name: cf.name,
        multiValue: cf.multiple,
        type: utils.convertType(cf.field_format),
        initialType: cf.field_format,
        values: cf.possible_values && cf.possible_values.map(field => {
          return {
            id: field.value,
            name: field.label
          };
        }) || []
      };
    });
  };

  const projectMapper = (arr) => {
    return arr.map(project => {
      return {
        id: project.id,
        key: utils.cleanKeyName(project.identifier),
        name: project.name
      };
    });
  };

  const getProjects = () => {
    let result;

    const pageSize = 25;

    const query = {
      'limit': pageSize + ''
    };

    const rProjects = loadJSON('/projects.json', query);

    //looping though projects in case if their number is above the pageSize
    if (rProjects.total_count > pageSize) {
      let toReturn = rProjects.projects;
      let tempProjects = [];
      let top = 0;
      let tempResult;
      do {
        tempResult = toReturn;
        top += pageSize;
        query.offset = top + '';
        tempProjects = loadJSON('/projects.json', query).projects || [];
        toReturn = tempResult.concat(tempProjects);
      } while (tempProjects.length === pageSize && top <= rProjects.total_count);
      result = projectMapper(toReturn);
    } else {
      result = projectMapper(rProjects.projects);
    }


    projects = result;

    return result;

  };

  const getProject = (projectKey) => {
    customFields = getCustomFields();
    const project = loadJSON('/projects/' + projectKey.id + '.json', {'include': 'issue_categories,trackers,enabled_modules'}).project;
    //getting subsystems
    const trackers = project.trackers;

    //checking if the project has wiki module enabled
    const hasArticles = !!project.enabled_modules.filter(module => module.name === 'wiki').length;
    if (hasArticles) {
      projectsWithWiki.push(projectKey.id);
    }


    //used for history reasons
    Object.keys(groups).forEach(el => {
      groupsMap[groups[el].id] = {};
      groupsMap[groups[el].id] = groups[el];
    });

    //getting members, adding them to the project's team
    //https://www.redmine.org/projects/redmine/wiki/Rest_Memberships
    const memberships = loadJSON('/projects/' + projectKey.id + '/memberships.json').memberships;
    groups[projectKey.name + ' Team'] = [];
    groups[projectKey.name + ' Team'] = memberships.filter(el => el.user).map(el => {
      const currentUser = usersData[el.user.id];
      return {
        id: currentUser.login,
        login: currentUser.login,
        name: currentUser.login,
        email: currentUser.mail,
        fullName: currentUser.firstname + ' ' + currentUser.lastname
      };
    });

    const adminGroups = memberships.filter(el => el.group);
    const subsystems = loadJSON('/projects/' + projectKey.id + '/issue_categories.json').issue_categories || [];
    const statuses = loadJSON('/issue_statuses.json').issue_statuses;
    const priorities = loadJSON('/enumerations/issue_priorities.json').issue_priorities;
    const versions = loadJSON('/projects/' + projectKey.id + '/versions.json').versions || [];

    //used as a temporary solution for isResolved
    statuses.forEach(el => {
      statusesMap[el.name] = {};
      statusesMap[el.name] = el;
    });

    //filling fieldsMap for history conversion
    utils.toFieldMap([trackers, subsystems, usersData, statuses, priorities, versions, customFields, projects, groupsMap], ['tracker_id', 'category_id', 'users', 'status_id', 'priority_id', 'fixed_version_id', 'cf', 'project_id', 'groups']);

    //checking if the project has issues
    const notEmpty = loadJSON('/issues.json', {
      project_id: projectKey.id,
      limit: '1'
    }).issues[0];

    //checking if the project has custom fields
    const hasCustomFields = typeof notEmpty !== 'undefined' ? !!notEmpty.custom_fields : false;

    const defaultFields = {
      id: project.id,
      key: utils.cleanKeyName(project.identifier),
      name: project.name,
      description: project.description,
      lead: {
        login: myAccount.login,
        name: myAccount.login,
        fullName: myAccount.fullName,
        email: myAccount.email
      },
      fields: [
        {
          id: 'State',
          name: 'State',
          multiValue: false,
          type: 'state',
          values: statuses.map(status => {
            return {
              name: status.name,
              isResolved: status.is_closed
            };
          })
        },
        {
          id: 'Assignee',
          name: 'Assignee',
          multiValue: false,
          type: 'user'
        },
        {
          id: 'Estimation',
          name: 'Estimation',
          multiValue: false,
          type: 'period'
        },
        {
          id: 'Spent time',
          name: 'Spent time',
          multiValue: false,
          type: 'period'
        },
        {
          id: 'Priority',
          name: 'Priority',
          multiValue: false,
          type: 'enum',
          values: priorities.map(priority => {
            return {
              id: priority.id,
              name: priority.name
            };
          })
        },
        {
          id: 'Type',
          name: 'Type',
          multiValue: false,
          type: 'enum',
          values: trackers.map(type => {
            return {
              id: type.id,
              name: type.name
            };
          }
          )
        },
        {
          id: 'Fix versions',
          name: 'Fix versions',
          multiValue: true,
          type: 'version'
        },
        {
          id: 'Due Date',
          name: 'Due Date',
          multiValue: false,
          type: 'date'
        },
        {
          id: 'Start Date',
          name: 'Start Date',
          multiValue: false,
          type: 'date'
        },
        {
          id: '% Done',
          name: '% Done',
          multiValue: false,
          type: 'string'
        }
      ],
      adminGroups: adminGroups.map(el => {
        return {id: el.group.id + '', name: el.group.name};
      })
    };

    if (subsystems.length) {
      const subField = {
        id: 'Subsystem',
        name: 'Subsystem',
        multiValue: false,
        type: 'ownedField',
        values: subsystems.map(el => {
          if (el.assigned_to) {
            let owner = usersData[el.assigned_to.id];
            return {
              name: el.name,
              owner: {
                login: owner.login,
                name: owner.login,
                fullName: owner.firstname + ' ' + owner.lastname,
                email: owner.mail
              }
            };
          }
          return {
            name: el.name
          };
        })
      };

      defaultFields.fields.push(subField);
    }

    if (hasCustomFields) {
      defaultFields.fields = defaultFields.fields.concat(customFields);
    }
    return defaultFields;

  };

  const getGroupId = (name) => {
    return groups.hasOwnProperty(name) ? groups[name].id : '';

  };
  const getUsers = (group, skip, top) => {
    let users;
    //for Teams return users from the groups map
    if (group.name.endsWith('Team')) {
      return groups[group.name];
    } else {

      const id = getGroupId(group.name);
      const query = {'group_id': id + '', 'limit': top + '', 'offset': skip + ''};
      users = loadJSON('/users.json?', query).users.map(user => user.id);

      return users.map(user => {
        const currentUser = usersData[user];
        return {
          name: currentUser.login,
          fullName: currentUser.firstname + ' ' + currentUser.lastname,
          email: currentUser.mail
        };
      });
    }
  };


  const getAttachmentContent = (project, issue, attachment) => {
    try {
      const res = loadJSON('/attachments/' + attachment.id + '.json').attachment;
      const mediaLocation = res.content_url.substring(res.content_url.indexOf('/attachments'));
      const response = connect.getSync(mediaLocation);
      return {
        data: response.responseAsStream,
        metadata: {
          mimeType: res.content_type
        }
      };
    } catch (e) {
      console.error('Failed to download attachment :( ', e.message);
      return {
        data: 'VW5mb3J0dW5hdGVseSBSZWRtaW5lIHJldHVybmVkIHRoaXMgZmlsZSBhcyBlbXB0eQo=',
        metaData: {
          mimeType: 'text/plain'
        }
      };
    }
  };
  const redmineAttachmentsConverter = attachment => {
    const author = utils.guestChecker(usersData[attachment.author.id]);
    return {
      id: attachment.id + '',
      created: attachment.created_on,
      filename: attachment.filename,
      mimeType: attachment.content_type,
      author: {
        name: author.login,
        type: 'user'
      },
      charset: 'UTF-8'
    };
  };

  const convertRedmineComment = projectName => {
    return (comment) => {
      const author = utils.guestChecker(usersData[comment.user.id]);
      let authorJSON = {
        login: author.login,
        name: author.login,
        fullName: author.firstname + ' ' + author.lastname
      };
      return {
        id: comment.id + '',
        text: comment.notes.trim(),
        author: authorJSON,
        attachments: comment.details && comment.details.filter(issue => issue.old_value && issue.property === 'attachment').map(comment => {
          return {
            id: comment.name,
            name: comment.new_value,
            filename: comment.new_value,
            author: authorJSON
          };
        }),
        created: comment.created_on,
        updated: comment.updated_on,
        visibleToGroups: utils.setVisible(comment.private_notes, projectName)

      };


    };
  };

  const convertRedmineHistory = issue => event => {
    const currentAuthor = utils.guestChecker(usersData[event.user.id]);
    const currResult = {};
    let attrObj;

    //used for multivalue cf
    let cfEnumA = [];
    let cfEnumR = [];
    let currentEnumCF = '';

    const toLinkValues = (relationName, relationValue) => {
      if (relationValue !== null && relationValue !== undefined) {
        return {
          'type': 'link',
          'linkName': relationName,
          'target': relationValue
        };
      } else {
        return null;
      }
    };

    event.details.forEach(el => {

      if (el.property === 'relation') {
        const relationOutward = true;
        const relationName = utils.convertRelations(el.name, relationOutward);
        currResult['links'] = {
          'removedValues': toLinkValues(relationName, el.old_value),
          'addedValues': toLinkValues(relationName, el.new_value)
        };

      } else if (el.property === 'attr' && el.name === 'parent_id') {
        const relationName = 'subtask of';
        currResult['links'] = {
          'removedValues': toLinkValues(relationName, el.old_value),
          'addedValues': toLinkValues(relationName, el.new_value)
        };

      } else if (el.property === 'attr' && el.name === 'is_private') {
        attrObj = utils.convertHistoryField(el, issue);

        currResult[attrObj.name] = {};
        currResult[attrObj.name] = {
          removedValues: attrObj.old,
          addedValues: attrObj.new
        };

      } else if (el.property === 'attr' && el.name === 'status_id') {
        attrObj = utils.convertHistoryField(el, issue);
        currResult[attrObj.name] = {};
        currResult[attrObj.name] = {
          removedValues: attrObj.old ? [{
            type: attrObj.type,
            value: attrObj.old,
            isResolved: statusesMap[attrObj.old] ? statusesMap[attrObj.old].is_closed : false
          }] : [],
          addedValues: attrObj.new ? [{
            type: attrObj.type,
            value: attrObj.new,
            isResolved: statusesMap[attrObj.new] ? statusesMap[attrObj.new].is_closed : false
          }] : []
        };

      } else if (el.property === 'attr') {
        attrObj = utils.convertHistoryField(el, issue, assignedToGroup);

        //skipping project_id
        if (!attrObj) {
          return;
        }

        currResult[attrObj.name] = {};
        //needed if groups could be set as assignees
        if (attrObj.hasOwnProperty('toGroup')) {
          if (!utils.notNull(attrObj.toGroup)) {
            currResult[attrObj.name] = {
              removedValues: attrObj.old ? [{type: attrObj.type, value: attrObj.old}] : [],
              addedValues: attrObj.new ? [{type: attrObj.type, value: attrObj.new}] : []
            };
            return;
          }
          if (attrObj.toGroup) {
            currResult[attrObj.name] = {
              removedValues: [],
              addedValues: [{type: attrObj.type, value: attrObj.new}]
            };
            //checking if we actually had a user to connect to
            if (attrObj.aux) {
              currResult['assignee'] = {
                removedValues: [{type: 'user', value: attrObj.aux}],
                addedValues: []
              };
            }

          } else {
            currResult[attrObj.name] = {
              removedValues: [{type: attrObj.type, value: attrObj.old}],
              addedValues: []
            };
            if (attrObj.aux) {
              currResult['assignee'] = {
                removedValues: [],
                addedValues: [{type: 'user', value: attrObj.aux}]
              };
            }
          }


        } else {
          currResult[attrObj.name] = {
            removedValues: attrObj.old ? [{type: attrObj.type, value: attrObj.old}] : [],
            addedValues: attrObj.new ? [{type: attrObj.type, value: attrObj.new}] : []
          };
        }


      } else if (el.property === 'cf') {
        attrObj = utils.convertHistoryCfField(el);

        if (attrObj.type === 'enum') {
          //used for multiple enum CFs
          if (currentEnumCF) {
            if (currentEnumCF !== attrObj.name) {
              //emptying maps
              cfEnumA = [];
              cfEnumR = [];
              currentEnumCF = attrObj.name;
            }
          } else {
            currentEnumCF = attrObj.name;
          }

          currResult[attrObj.name] = {};
          attrObj.old ? cfEnumR.push({type: attrObj.type, value: attrObj.old}) : [];
          attrObj.new ? cfEnumA.push({type: attrObj.type, value: attrObj.new}) : [];

          currResult[attrObj.name] = {
            removedValues: cfEnumR,
            addedValues: cfEnumA
          };

        } else if (attrObj.type === 'user') {
          currResult[attrObj.name] = {};
          currResult[attrObj.name] = {
            removedValues: attrObj.old ? [{type: attrObj.type, value: usersData[attrObj.old].login}] : [],
            addedValues: attrObj.new ? [{type: attrObj.type, value: usersData[attrObj.new].login}] : []
          };

        } else {
          currResult[attrObj.name] = {};
          currResult[attrObj.name] = {
            removedValues: attrObj.old ? [{type: attrObj.type, value: attrObj.old}] : null,
            addedValues: attrObj.new ? [{type: attrObj.type, value: attrObj.new}] : null
          };
        }
      }
    }
    );

    const result = {
      id: event.id + '',
      author: {
        login: currentAuthor.login,
        name: currentAuthor.login,
        fullName: currentAuthor.firstname + ' ' + currentAuthor.lastname

      },
      timestamp: event.created_on
    };
    result.fieldChanges = {};

    Object.keys(currResult).forEach(key => {
      result.fieldChanges[key] = {};
      result.fieldChanges[key] = currResult[key];
    });

    return result;

  };

  const getCustomFieldsFromIssue = (issue) => {
    const result = {};
    const cfMap = {};

    //creating customFields map for setting the custom field's type
    customFields.forEach(cf => {
      cfMap[cf.id] = {};
      cfMap[cf.id] = cf;
    });

    //helps to return proper value for specific custom fields
    const singleValueHelper = (field) => {
      let fromMap = cfMap[field.id];

      if (fromMap.initialType === 'bool') {
        return fromMap.values[utils.findIdx(fromMap.values, field.value)].name;
      } else if (fromMap.initialType === 'attachment') {
        return loadJSON('/attachments/' + field.value + '.json').attachment.content_url;
      } else {
        return field.value;
      }
    };

    if (issue.custom_fields && issue.custom_fields.length) {
      issue.custom_fields.forEach(field => {
        if (Array.isArray(field.value)) {
          result[field.name] = [];
          field.value.length ? field.value.map(val => cfMap[field.id].values[utils.findIdx(cfMap[field.id].values, val)]).forEach(val => result[field.name].push({
            id: field.id,
            type: cfMap[field.id].type,
            multiValue: field.multiple,
            value: val.name
          })) : [];
        } else {
          result[field.name] = {};
          if (cfMap[field.id].initialType === 'user') {
            //skipping if no value is assigned
            if (!field.value) {
              delete result[field.name];
              return;
            }

            let cfUser = usersData[field.value];
            result[field.name] = {
              id: cfUser.login,
              type: 'user',
              name: cfUser.login,
              email: cfUser.mail,
              fullName: cfUser.firstname + ' ' + cfUser.lastname
            };
          } else if (cfMap[field.id].initialType === 'enumeration') {
            result[field.name] = {
              id: field.id,
              name: cfMap[field.id].values[utils.findIdx(cfMap[field.id].values, field.value)].name,
              type: cfMap[field.id].type
            };
          } else {
            result[field.name] = {
              id: field.id,
              name: field.name,
              type: cfMap[field.id].type,
              value: field.value ? singleValueHelper(field) : null
            };
          }

        }
      });
    }
    return result;

  };
  const convertIssueLink = (issueId, relation) => {
    const from = relation.issue_id;
    const to = relation.issue_to_id;
    if (!from || !to) {
      console.warn('Skip link [issue=' + issueId + '].relations[id=' + relation.id + '] ' +
        ' due to undefined `issue_id` or `issue_to_id` properties');
      return null;
    }
    const outward = issueId === from;
    const target = outward ? to : from;
    return {
      linkName: utils.convertRelations(relation.relation_type, outward),
      target: target + ''
    };
  };

  const convertRedmineIssues = (issue) => {
    //checking if assignee is a group
    assignedToGroup = issue.assigned_to ? utils.isGroupChecker(groups, issue.assigned_to.id) : false;
    //getting additional info for proper user creation
    const author = utils.guestChecker(usersData[issue.author.id]);
    let assignee = {};
    const children = issue.children && issue.children.map(child => {
      return {
        linkName: 'parent for',
        target: child.id + ''
      };
    }) || [];

    const defaultFields = {
      State: {
        type: 'state',
        name: issue.status.name,
        isResolved: !!issue.closed_on
      },
      summary: {
        type: 'string',
        value: issue.subject
      },
      description: {
        type: 'text',
        value: issue.description
      },
      Type: {
        type: 'enum',
        name: issue.tracker.name
      },
      created: issue.created_on,
      updated: issue.updated_on,
      Priority: {
        type: 'enum',
        name: issue.priority.name
      },
      'Start Date': issue.start_date && {
        type: 'date',
        value: issue.start_date
      },
      'Due Date': issue.due_date && {
        type: 'date',
        value: issue.due_date
      },
      Estimation: issue.estimated_hours ? {
        type: 'period',
        value: utils.floatConverter(issue.estimated_hours)
      } : null,
      'Fix versions': issue.fixed_version && {
        type: 'version',
        name: issue.fixed_version.name
      },
      Subsystem: issue.category && {
        type: 'ownedField',
        name: issue.category.name
      },
      '% Done': {
        type: 'string',
        value: issue.done_ratio + ''
      },
      author: {
        login: author.login,
        email: author.mail,
        name: author.login,
        fullName: author.firstname + ' ' + author.lastname,
        banned: author.banned || false,
        type: 'user'
      },
      links: issue.relations
        ? issue.relations.map(rel => convertIssueLink(issue.id, rel)).filter(link => !!link).concat(children)
        : children,
      watchers: issue.watchers && issue.watchers.map(watcher => {
        const currentWatcher = usersData[watcher.id];
        return {
          id: currentWatcher.login,
          name: currentWatcher.login,
          login: currentWatcher.login,
          email: currentWatcher.mail,
          fullName: currentWatcher.firstname + ' ' + currentWatcher.lastname,
          banned: currentWatcher.banned || false,
          type: 'user'
        };
      }),
      workItems: workItemsData[issue.id] && workItemsData[issue.id].map(item => {
        const author = utils.guestChecker(usersData[item.user.id]) ?? myAccount;
        return {
          id: item.id + '',
          text: item.comments ? item.comments.trim() : '',
          author: author.login,
          created: item.created_on,
          updated: item.updated_on,
          duration: item.hours > 0.01 ? Math.floor(item.hours * 60) : Math.ceil(item.hours * 60)

        };
      }),
      visibleToGroups: utils.setVisible(issue.is_private, issue.project.name),
      attachments: issue.attachments && issue.attachments.map(redmineAttachmentsConverter),
      comments: issue.journals && issue.journals.filter(comment => comment.notes).map(convertRedmineComment(issue.project.name)),
      resolved: issue.closed_on
    };

    //assignee management
    if (issue.assigned_to) {
      if (assignedToGroup) {
        defaultFields['Assignee group'] = {
          type: 'group',
          name: issue.assigned_to.name,
          id: issue.assigned_to.id + ''
        };
      } else {
        assignee = issue.assigned_to.id === issue.author.id ? author : usersData[issue.assigned_to.id];
        defaultFields['assignee'] = {
          id: assignee.login,
          login: assignee.login,
          email: assignee.mail,
          name: assignee.login,
          banned: assignee.banned || false,
          fullName: assignee.firstname + ' ' + assignee.lastname,
          type: 'user'
        };
      }

    }

    const redmineFields = getCustomFieldsFromIssue(issue);
    return {
      id: issue.id + '',
      key: issue.id + '', //faking until we make em'
      fields: Object.assign({}, defaultFields, redmineFields),
      history: issue.journals && issue.journals.filter(el => el.details.length).map(convertRedmineHistory(issue)).filter(el => el !== null).sort((a, b) => a.timestamp - b.timestamp)
    };
  };

  // requesting additional info as general issues endpoint doesn't provide required info
  const getAdditionalInfo = (issue) => {
    return loadJSON('/issues/' + issue.id + '.json', miscQuery).issue;
  };

  const getIssueUpdates = (project, after, updatedAfter, top) => {
    let redmineIssues = [];
    let count = 0;

    //nullifying offset for next project
    if (currentProject !== project.id) {
      if (currentProject !== 0) {
        currentOffset = 0;
      }
      currentProject = project.id;
    }

    const query = {
      'status_id': '*',
      'limit': top + '',
      'project_id': project.id + '',
      'offset': currentOffset + '',
      'sort': 'created_on:asc'
    };

    if (updatedAfter) {
      query.sort = 'updated_on:asc';
      query.updated_on = '>=' +  updatedAfter + '';
    }

    let tempIssues = loadJSON('/issues.json', query).issues || [];
    tempIssues.forEach(issue => {
      redmineIssues.push(issue);
      count++;
    });
    currentOffset += count;
    console.log('Loaded ' + count + ' issues from ' + project.name);
    console.log('Getting journals, relations and watchers...');
    redmineIssues = redmineIssues.map(getAdditionalInfo);
    return redmineIssues.map(convertRedmineIssues);

  };

    function getIssues(project, after, top) {
      return getIssueUpdates(project, after, null, top);
    }

    const getArticles = (projectInfo, after, top) => {
      let result = [];
      //used for iterating, as Redmine returns all project's article at once
      let articlesCut = [];
      //if the current project does not have wiki module enabled skip its processing
      if (projectsWithWiki.includes(projectInfo.id)) {
        if (articlesMap.hasOwnProperty(projectInfo.id)) {
          articlesCut = articles.splice(top);
          //modify saved articles for next iteration
          articles = articlesCut.slice();
        } else {
        //filling in articlesMap
          articlesMap[projectInfo.id] = {};
          articlesCut = loadJSON('/projects/' + projectInfo.id + '/wiki/index.json').wiki_pages;
          //saving all of the articles for further iterations
          articles = articlesCut.slice();
        }

        result = articlesCut.map(article => {

          const defaultFields = {
            id: articlesCounter + '',
            key: articlesCounter++ + '',
            aId: article.title
          };
          articlesMap[projectInfo.id][defaultFields.aId] = {};
          articlesMap[projectInfo.id][defaultFields.aId] = {id: defaultFields.id};
          const articleDetails = loadJSON('/projects/' + projectInfo.id + '/wiki/' + encodeURIComponent(defaultFields.aId) + '.json', {'include': 'attachments'}).wiki_page;

          const author = utils.guestChecker(usersData[articleDetails.author.id]);

          const articleFields = {
            fields: {
              summary: articleDetails.title.replace(/_/g, ' '),
              content: articleDetails.text,
              author: {
                login: author.login,
                email: author.mail,
                name: author.login,
                fullName: author.firstname + ' ' + author.lastname,
                banned: author.banned || false,
                type: 'user'
              },
              parent: articleDetails.parent && articleDetails.parent.title,
              attachments: articleDetails.attachments && articleDetails.attachments.map(redmineAttachmentsConverter),
              created: articleDetails.created_on,
              updated: articleDetails.updated_on,
              comments: articleDetails.comments && [{
                text: articleDetails.comments.trim(),
                author: {
                  id: author.login,
                  login: author.login,
                  email: author.mail,
                  name: author.login,
                  fullName: author.firstname + ' ' + author.lastname,
                  banned: author.banned || false,
                  type: 'user'
                }
              }] || []
            }
          };
          return Object.assign({}, defaultFields, articleFields);
        });

        //filling in parents
        result.forEach(article => {
          if (article.fields.parent) {
            article.fields.parent = articlesMap[projectInfo.id][article.fields.parent].id;
          }
        });

      }
      return result;

    };

    Object.assign(client, {
      getProjects: getProjects.bind(this), // api
      getProject: getProject.bind(this), // api
      getLinkTypes: () => [{
        id: '1',
        name: 'Copied',
        sourceToTarget: 'copied to',
        targetToSource: 'copied from'
      }, {
        id: '2',
        name: 'Blocks',
        sourceToTarget: 'blocks',
        targetToSource: 'blocked by'
      },
      {
        id: '3',
        name: 'Precedes',
        sourceToTarget: 'follows',
        targetToSource: 'precedes'
      }],
      getServerInfo: getServerInfo.bind(this), // api
      getAttachmentContent: getAttachmentContent.bind(this),
      getUsers: getUsers.bind(this),
      // getUsers: () => [],
      prepareToImport: prepareToImport.bind(this),
      getIssues: getIssues.bind(this), // api
      getIssueUpdates: getIssueUpdates.bind(this),
      getTimestampFormats: getTimestampFormats.bind(this), // api
      getArticles: getArticles.bind(this)
    });
    return client;

}
;
exports.Client = RedmineIssues;
